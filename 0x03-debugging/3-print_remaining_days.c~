#include <stdio.h>
#include "main.h"

/**
 * print_remaining_days - takes a date and prints how many days are
 * left in the year, taking leap years into account
 * @month: month in number format
 * @day: day of month
 * @year: year
 * Return: void
 */
void print_remaining_days(int month, int day, int year)
{
  int total_days;

  if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
    {
      // Leap year logic
      switch (month)
	{
	case 1:
	  total_days = 31;
	  break;
	case 2:
	  total_days = 60; // 31 (Jan) + 29 (Feb)
	  break;
	case 3:
	  total_days = 91; // 31 (Jan) + 29 (Feb) + 31 (Mar)
	  break;
	case 4:
	  total_days = 121; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr)
	  break;
	case 5:
	  total_days = 152; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May)
	  break;
	case 6:
	  total_days = 182; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun)
	  break;
	case 7:
	  total_days = 213; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul)
	  break;
	case 8:
	  total_days = 243; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug)
	  break;
	case 9:
	  total_days = 274; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep)
	  break;
	case 10:
	  total_days = 305; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct)
	  break;
	case 11:
	  total_days = 335; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct) + 30 (Nov)
	  break;
	case 12:
	  total_days = 366; // 31 (Jan) + 29 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct) + 30 (Nov) + 31 (Dec)
	  break;
	default:
	  break;
	}
    }
  else
    {
      // Non-leap year logic
      switch (month)
	{
	case 1:
	  total_days = 31;
	  break;
	case 2:
	  total_days = 59; // 31 (Jan) + 28 (Feb)
	  break;
	case 3:
	  total_days = 90; // 31 (Jan) + 28 (Feb) + 31 (Mar)
	  break;
	case 4:
	  total_days = 120; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr)
	  break;
	case 5:
	  total_days = 151; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May)
	  break;
	case 6:
	  total_days = 181; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun)
	  break;
	case 7:
	  total_days = 212; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul)
	  break;
	case 8:
	  total_days = 243; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug)
	  break;
	case 9:
	  total_days = 273; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep)
	  break;
	case 10:
	  total_days = 304; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct)
	  break;
	case 11:
	  total_days = 334; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct) + 30 (Nov)
	  break;
	case 12:
	  total_days = 365; // 31 (Jan) + 28 (Feb) + 31 (Mar) + 30 (Apr) + 31 (May) + 30 (Jun) + 31 (Jul) + 31 (Aug) + 30 (Sep) + 31 (Oct) + 30 (Nov) + 31 (Dec)
	  break;
	default:
	  break;
	}
    }

  if (day > total_days)
    {
      printf("Invalid date: %02d/%02d/%04d\n", month, day - total_days, year);
    }
  else
    {
      printf("Day of the year: %d\n", day);
      printf("Remaining days: %d\n", total_days - day);
    }
}
